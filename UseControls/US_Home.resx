<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AABJRU5ErkJggg==
</value>
  </data>
</root>